name: Deploy to Production

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          else
            url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          fi
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || 'production' }}',
              required_contexts: [],
              auto_merge: false,
              production_environment: true
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment completed successfully'
            });

  database-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy-vercel
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Supabase CLI
        run: |
          wget -qO- https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz | tar xvz
          sudo mv supabase /usr/local/bin/

      - name: Run database migrations
        run: |
          if [ -d "supabase/migrations" ]; then
            echo "Running database migrations..."
            supabase db push --db-url="${{ secrets.DATABASE_URL }}"
          else
            echo "No migrations to run"
          fi
        continue-on-error: true

  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-vercel, database-migrations]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against production..."
          deployment_url="${{ needs.deploy-vercel.outputs.url }}"
          
          # Check if homepage is accessible
          curl -f -s -o /dev/null -w "%{http_code}" $deployment_url || exit 1
          echo "Homepage is accessible"
          
          # Check if API is responding
          curl -f -s -o /dev/null -w "%{http_code}" $deployment_url/api/health || echo "Health check endpoint not configured"
          
          # Run any additional smoke tests
          npm run test:smoke || echo "No smoke tests configured"
        env:
          DEPLOYMENT_URL: ${{ needs.deploy-vercel.outputs.url }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-vercel, smoke-tests]
    if: always()
    steps:
      - name: Slack Notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status == 'success' && 'succeeded' || 'failed' }}!
            Environment: ${{ github.event.inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            URL: ${{ needs.deploy-vercel.outputs.url }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Discord Notification
        if: env.DISCORD_WEBHOOK_URL != ''
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: "Deployment ${{ job.status == 'success' && 'Successful' || 'Failed' }}"
          description: |
            **Environment:** ${{ github.event.inputs.environment || 'production' }}
            **Commit:** `${{ github.sha }}`
            **Author:** ${{ github.actor }}
            **URL:** ${{ needs.deploy-vercel.outputs.url }}
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Create GitHub Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deployment Failed: ${context.sha.substring(0, 7)}`,
              body: `## Deployment Failure
              
              **Environment:** ${{ github.event.inputs.environment || 'production' }}
              **Commit:** ${context.sha}
              **Author:** ${context.actor}
              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              Please investigate and fix the deployment issue.`,
              labels: ['deployment-failure', 'priority:high']
            });

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-vercel, smoke-tests]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Rollback to previous deployment
        run: |
          echo "Rolling back to previous production deployment..."
          vercel rollback --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }}
        continue-on-error: true

      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '⚠️ Deployment failed. Automatic rollback initiated.'
            });